Data Types:
JavaScript                                                              Python
string                                                                  str
number -> from -(2^53 - 1) to 2^53 - 1                                  int -> for whole numbers / float -> for decimals
bigint -> for numbers outside the range specified above                 int -> for whole numbers / float -> for decimals
-Infinity / Infinity                                                    ZeroDivisionError
NaN -> complex numbers                                                  complex -> a + bi
NaN -> operating numbers with non-numbers data type                     TypeError
boolean -> true / false                                                 bool -> True / False
null -> the value of no value                                           None
undefined -> the absence of value                                       None
array                                                                   list
object                                                                  dict
not available                                                           range
not available                                                           tuple

-------------------------------------------------------------------------------------------------------------------------------------------

Declaring Variables:
JavaScript                                                              Python
var <a> = <value>;                                                      <a> = <value>
let <a> = <value>;                                                      <a> = <value>
const <a> = <value>;                                                    <a> = <value>

-------------------------------------------------------------------------------------------------------------------------------------------

Variable Naming Convention:
JavaScript                                                              Python
variableName                                                            variable_name
ClassName                                                               ClassName
const CONSTANT_NAME;                                                    CONSTANT_NAME

-------------------------------------------------------------------------------------------------------------------------------------------

Comments:
JavaScript                                                              Python
// Single-line comment                                                  # Single-line and multi-line comments
/* Multi-line comment */

-------------------------------------------------------------------------------------------------------------------------------------------

Operators:
JavaScript                                                              Python
Math.floor(a / b)                                                       a // b
===                                                                     ==
!==                                                                     !=
== / !=                                                                 not available
++ / --                                                                 not available
&&                                                                      and
||                                                                      or
!                                                                       not

-------------------------------------------------------------------------------------------------------------------------------------------

Built-In Functions:
JavaScript                                                              Python
console.log(<output>) -> debug console                                  print(<output>) -> terminal
alert(<output>) -> display a small prompt on a browser                  not available
typeof <instance>                                                       type(<instance>)
                                                                        isinstance(<a>, <datatype>)

-------------------------------------------------------------------------------------------------------------------------------------------

String Methods:
JavaScript                                                              Python
string.toUpperCase()                                                    str.upper()
string.toLowerCase()                                                    str.lower()

-------------------------------------------------------------------------------------------------------------------------------------------

Array/List Methods:
JavaScript                                                              Python
array.map(mappingFunction);                                             map(list, mapping_function)
array.filter(filterFunction);
array1.concat(array2);                                                  list1.extend(list2)
array.slice(<startIndex df:0>, <endIndex df:0>);
array.splice(<index>, <howmany df:0>, <item1>, ..., <itemX>)
array.join(<separator df:,>)

-------------------------------------------------------------------------------------------------------------------------------------------

Falsy Values:
JavaScript                                                              Python
false                                                                   False
0, 0.0, -0, -0.0, 0n                                                    0, 0.0, 0j
"", '', ``                                                              "", '', '''''', [], (), {}, set(), range(0)
null, undefined, NaN                                                    None

Important note: Empty arrays and empty objects are true in JavaScript

-------------------------------------------------------------------------------------------------------------------------------------------

If-Else Statements:
JavaScript                                                              Python
if (condition1) {                                                       if condition1:
    // code;                                                                # code
} else if (condition2) {                                                elif condition2:
    // code;                                                                # code
} else {                                                                else:
    // code;                                                                # code
}

switch (expression) {                                                   not available
    case value1:
        // code;
        break;
    case value2:
        // code;
        break;
    default:
        // code;
}

var/let/const <a> = <condition> ? <exprIfTrue> : <exprIfFalse>;         <a> = <exprIfTrue> if <condition> else <exprIfFalse>

-------------------------------------------------------------------------------------------------------------------------------------------

Conditional Statements:
JavaScript                                                              Python
In JavaScript, conditional statements cannot be chained using           Conditional statements in Python work just like statements in
more than 1 logic operator. Otherwise, it will interpret the            mathematics and can be chained together. Example:
statement incorrectly. Example:
                                                                        number = 100
let number = 100;                                                       print(bool(5 < number < 10))
console.log(Boolean(5 < number < 10));                                  # returns False
// console.log(Boolean(5 < 100 < 10));
// console.log(Boolean(true < 10));
// console.log(Boolean(1 < 10));
// returns true

To make the statement working correctly, the statement needs to be
separated by adding a logic operator. Example:

let number = 100;
console.log(Boolean(5 < number && number < 10));
// returns false

-------------------------------------------------------------------------------------------------------------------------------------------

For Loops:
JavaScript                                                              Python
for (var/let i = 0; i < n; i++) {                                       for i in range(n):
    // code;                                                                # code
}


for (var/let i of <iterable object>) {                                  for i in <iterable object>:
    // code;                                                                # code
} -> iterates over values

// Example:
for (let i of [4, 5, 6]) {
    console.log(i);
} -> logs "4", "5", "6"


for (var/let i in <iterable object>) {                                  for i in dict.keys():
    // code;                                                                # code
} -> iterates over properties
                                                                        # The code above is only available for dict. To access properties
// Example:                                                             # (index) of a list, the equivalent code is:
for (let i in [4, 5, 6]) {
    console.log(i);                                                     for i in range(len(list)):
} -> logs "0", "1", "2"                                                     # code

-------------------------------------------------------------------------------------------------------------------------------------------

while (condition) {                                                     while condition:
    // code;                                                                # code
}


do {                                                                    not available
    // code;
} while (condition);

-------------------------------------------------------------------------------------------------------------------------------------------

Functions:
JavaScript                                                              Python
function <functionName>(para1, para2, ...) {                            def function_name(para1, para2, ...):
    // code;                                                                # code
}

It's not necessary to pass the same number of arguments to the          The number of arguments passed to the function call must be the
function call. Any missing arguments will be assigned the value         same number of parameters defined in the function definition.
'undefined' by default, whereas extra arguments can be accessed         Otherwise, this will raise a TypeError.
with the 'arguments' object.

-------------------------------------------------------------------------------------------------------------------------------------------

Object-Oriented Programming:
JavaScript                                                              Python
class NewClass {                                                        class NewClass:
    constructor(attribute1, attribute2, ...) {                              def __init__(self, attribute1, attribute2, ...):
        this.attribute1 = attribute1;                                           self.attribute1 = attribute1
        this.attribute2 = attribute2;                                           self.attribute2 = attribute2
    }
                                                                            def method1(self):
    method1() {                                                                 return <code>
        return <code>;
    }
}

To create instances of a class:
myClass = new NewClass(arg1, arg2, ...);                                my_class = NewClass(arg1, arg2, ...)